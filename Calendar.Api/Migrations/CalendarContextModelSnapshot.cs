// <auto-generated />
using System;
using Calendar.Api.DatabaseConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Calendar.Api.Migrations
{
    [DbContext(typeof(CalendarContext))]
    partial class CalendarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Calendar.Api.Models.Calendar", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CalendarId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("Calendar.Api.Models.CalendarEvent", b =>
                {
                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CalendarEventGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateTimeEnded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTimeStarted")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CalendarEventId");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarEvent");
                });

            modelBuilder.Entity("Calendar.Api.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleLevel")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Calendar.Api.Models.SharedCalendar", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarOwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SharedCalendarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SharedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("SharedCalendar");
                });

            modelBuilder.Entity("Calendar.Api.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Calendar.Api.Models.UserAssignment", b =>
                {
                    b.Property<Guid>("UserAssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserAssignmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAssignment");
                });

            modelBuilder.Entity("Calendar.Api.Models.Calendar", b =>
                {
                    b.HasOne("Calendar.Api.Models.User", "User")
                        .WithMany("Calendars")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Calendar_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calendar.Api.Models.CalendarEvent", b =>
                {
                    b.HasOne("Calendar.Api.Models.Calendar", "Calendar")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarId")
                        .IsRequired()
                        .HasConstraintName("FK_CalendarEvent_Calendar");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Calendar.Api.Models.UserAssignment", b =>
                {
                    b.HasOne("Calendar.Api.Models.Role", "Role")
                        .WithMany("UserAssignments")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_Role");

                    b.HasOne("Calendar.Api.Models.User", "User")
                        .WithMany("UserAssignments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Assignment_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calendar.Api.Models.Calendar", b =>
                {
                    b.Navigation("CalendarEvents");
                });

            modelBuilder.Entity("Calendar.Api.Models.Role", b =>
                {
                    b.Navigation("UserAssignments");
                });

            modelBuilder.Entity("Calendar.Api.Models.User", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("UserAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
